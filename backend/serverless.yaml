service: ${self:custom.prefix}-${opt:region}

configValidationMode: error
frameworkVersion: "2 || 3"
package:
  individually: false
  patterns:
    - "!**/*"
    - main.py

custom:
  prefix: trash-ai

  localstack:
    stages:
      # list of stages for which the plugin should be enabled
      - local
    host: http://localstack # optional - LocalStack host to connect to
    edgePort: 4566 # optional - LocalStack edge port to connect to
  serverless-offline:
    host: 0.0.0.0
    httpPort: 4000
  # pythonRequirements:
  #   dockerizePip: false
  #   pythonBin: ${opt:pythonBin, self:provider.runtime}

provider:
  name: aws
  region: ${opt:region}
  stage: ${opt:stage}
  runtime: python3.8
  httpApi:
    cors: true
  timeout: 29
  memorySize: 128
  stackName: ${self:custom.prefix}-${opt:region}-${opt:stage}-backend
  iam:
    role: ${ssm:/${self:custom.prefix}/role_arn}
  environment:
    REGION: ${opt:region}
    STAGE: ${opt:stage}
    LOG_LEVEL: ${env:LOG_LEVEL, "INFO"}
    DOMAIN: ${env:DOMAIN}
    IS_ROOT_DOMAIN: ${env:IS_ROOT_DOMAIN}

    PREFIX: ${self:custom.prefix}
    NAMESPACE: ${self:custom.prefix}/${opt:stage}/${opt:region}
    MAIN_BUCKET: ${ssm:/${self:custom.prefix}/${opt:region}/main_bucket_name}

plugins:
  - serverless-localstack
  - serverless-offline

layers:
  apprequirements:
    name: ${self:custom.prefix}-${opt:region}-apprequirements
    path: layers/requirements
    compatibleRuntimes:
      - python3.8
    retain: false
    package:
      include:
        - "**/*"
    description: "Dependencies for app"

functions:
  webapp:
    handler: main.handler
    layers:
      - { Ref: ApprequirementsLambdaLayer }

    events:
      - httpApi:
          method: "*"
          path: "/{proxy+}"

  # ratehandler:
  #   handler: main.rate
  #   events:
  #     # Invoke Lambda function every minute
  #     - schedule: rate(1 minute)
  #
  # cronhandler:
  #   handler: main.cron
  #   events:
  #     # Invoke Lambda function every 2nd minute from Mon-Fri
  #     - schedule: cron(0/2 * ? * MON-SUN *)
